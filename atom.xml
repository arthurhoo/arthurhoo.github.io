<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Arthur's Blog]]></title>
  <link href="http://arthurhoo.github.io/atom.xml" rel="self"/>
  <link href="http://arthurhoo.github.io/"/>
  <updated>2017-03-19T14:08:32+08:00</updated>
  <id>http://arthurhoo.github.io/</id>
  <author>
    <name><![CDATA[Arthurhoo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[时间轮定时器介绍-Java实现]]></title>
    <link href="http://arthurhoo.github.io/blog/2017/02/18/shi-jian-lun-ding-shi-qi-jie-shao-javashi-xian/"/>
    <updated>2017-02-18T22:03:27+08:00</updated>
    <id>http://arthurhoo.github.io/blog/2017/02/18/shi-jian-lun-ding-shi-qi-jie-shao-javashi-xian</id>
    <content type="html"><![CDATA[<h2>0. 背景</h2>

<p>很多中间件内部需要一些定时任务。这类定时任务最简单的是依赖quartz等定时组件实现。依赖第三方包，在进行组件升级的时候会有不兼容的问题，比如spring4对quartz的依赖接口就
改变了，必须升级quartz。第三方包的api变化是一个很大问题。为了做到自包含，可以自己实现一个定时器。</p>

<p>时间轮定时结构（TimeWheel）是George Varghese和Anthony Lauck于1997年在论文<a href="https://pdfs.semanticscholar.org/e04e/548b287d48260def0ffe09692236d2a56ad3.pdf">《Hashed and Hierarchical Timing Wheels:Efficient Data Structures for Implementing a Timer Facility》</a>中提出的。
目前在Linux内核、netty中都有应用。</p>

<p>下图可以很通俗清晰地阐述时间轮的机制：</p>

<p><img src="https://zos.alipayobjects.com/rmsportal/rWjuDLxWYmOUjbZxHMeL.gif" alt="image" /></p>

<p>TimeWheel结构原理很简单，类似钟表，有一个表盘，按照一定的时间间隔划分为多个槽（Slot)，每个槽标号，并且在每个槽上挂载一个列表。比如计时一分钟的时间轮，一般分为60个格子，每一个固定时间间隔（tick)走动一格。在进行初始化的时候，相对于当前指针延后相同时间间隔的任务挂载在同一个时刻
slot的链表上。当时间指针指向某个槽的时候，当前槽的任务集合中的所有任务被执行。</p>

<p>根据George的论文描述，时间轮的实现主要推荐两种方式，单表盘和分层表盘结构。</p>

<h3>单表盘：</h3>

<p>整个定时器只有一个表盘，用循环数组代表表盘，每个槽的时间间隔（tick)代表了定时器能够达到的定时精度，循环数组的大小代表了整个定时器可以定时的时间范围。比如说要一个可以最大定时一分钟的时间轮，其表盘分为60个槽，每隔1秒钟（tick)，指针转动一个槽.netty中就使用了这类结构实现时间轮。
单表盘时间轮的好处是实现简单，定时精确，但是也有个问题是所能代表的时间有限。设想一下如果要表示一个计时范围1小时，精度1秒的时间轮，那么循环数组的大小就需要3600，如果标识一天呢，就需要3600*24.</p>

<h3>分层时间轮：</h3>

<p>分层时间轮模拟了时间进制的方式来组织数据结构。按照时间精度的等级采用多个表盘来表示不懂精度的时间轮，不同精度的时间轮设置不同的tick转动。比如一个可以计时范围1天，精度1秒的时间轮，会有3个表盘标识，分别是小时级表盘（HourDial)、分钟级表盘(MinuteDial)和秒级表盘(SecondDial)。HourDial每小时转动一次，MinuteDial每一分钟转动一次，SecondDial每一秒钟转动一次，各个表盘互不干扰。在这种结构下，要表示一天的时间跨度所需要的空间slot数目如下：</p>

<blockquote><p>24(小时)+60(分钟)+60(秒) = 144</p></blockquote>

<p>分层时间轮的特点是标识的时间范围大，对空间要求低，可以方便扩展精度和时间范围。缺点是实现较为复杂。</p>

<h2>时间轮（TimeWheel）实现</h2>

<p>综合考虑未来的可扩展性、精度和空间消耗的需求，采用分层时间轮的结构实现定时器。下面详细讲述一下定时器实现的几个关键要素和思路。</p>

<p>根据论文<a href="https://pdfs.semanticscholar.org/e04e/548b287d48260def0ffe09692236d2a56ad3.pdf">《Hashed and Hierarchical Timing Wheels:Efficient Data Structures for Implementing a Timer Facility》</a>的描述，
TimeWheel主要包含四个：
* 初始化组件：包括时间表盘、指针初始化以及任务挂载等；
* 停止组件：停止计时，清理现场
* tick设定和初始化
* 任务的具体执行处理器：负责具体执行任务</p>

<p>上面几个组件是论文的理论划分，具体的实现中尽量按照这样切分功能块，但也没有必要完全实现每一个部分。</p>

<p>我们距离设计一个定时范围1个月，精度1秒的定时器。</p>

<h4>任务抽象</h4>

<p>为了让定时器能够统一处理系统内部所有任务，我们需要对所有任务进行抽象，先抽象一个AbstractTask,所有任务只要继承自这个抽象类，都可以被时间轮挂载和执行。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">AbstractTask</span> <span class="kd">implements</span> <span class="n">Runable</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">protected</span> <span class="n">Long</span>    <span class="n">period</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">protected</span> <span class="n">Integer</span> <span class="n">secondPeriod</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">protected</span> <span class="n">Integer</span> <span class="n">minutePeriod</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">protected</span> <span class="n">Integer</span> <span class="n">hourPeriod</span>   <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">protected</span> <span class="n">Integer</span> <span class="n">dayPeriod</span>    <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">protected</span> <span class="n">String</span>  <span class="n">taskId</span><span class="o">;</span> <span class="c1">//任务的唯一标识</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>表盘结构</h4>

<p>TimeWheel定时范围1个月，精度1秒，所以我们需要4级时间表盘，分别为：</p>

<ul>
<li>秒级表盘(dialInSeconds)&mdash;每秒转动1次</li>
<li>分钟级表盘(dialInMinutes)&mdash;每分钟转动1次</li>
<li>小时级表盘(dialInHours) &mdash;- 每小时转动一次</li>
<li>天级表盘（dialInDays) &mdash; 每24小时转动一次</li>
</ul>


<p>由于表盘的主要作用是读取当前的刻度，所以在初始化之后只有读操作没有写，所以我们直接使用ArrayList表示。</p>

<p>每一个表盘需要划分多个槽，在槽结构上封装任务的挂载和删除、查询等相关操作。所以定义了Slot类：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 时间轮槽数据结构 用于存储定时任务</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">class</span> <span class="nc">Slot</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">private</span> <span class="n">Vector</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">expiredTask</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Vector</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;();</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/**</span>
</span><span class='line'><span class="cm">         * 添加任务</span>
</span><span class='line'><span class="cm">         * </span>
</span><span class='line'><span class="cm">         * @param task</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="kt">void</span> <span class="nf">insertTask</span><span class="o">(</span><span class="n">T</span> <span class="n">task</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">expiredTask</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">task</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/**</span>
</span><span class='line'><span class="cm">         * 判断是否有可执行任务</span>
</span><span class='line'><span class="cm">         * </span>
</span><span class='line'><span class="cm">         * @return</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="kt">boolean</span> <span class="nf">hasTask</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="o">!</span><span class="k">this</span><span class="o">.</span><span class="na">expiredTask</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/**</span>
</span><span class='line'><span class="cm">         * 获取制定索引的任务</span>
</span><span class='line'><span class="cm">         * </span>
</span><span class='line'><span class="cm">         * @param index</span>
</span><span class='line'><span class="cm">         * @return</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="n">T</span> <span class="nf">getTask</span><span class="o">(</span><span class="kt">int</span> <span class="n">index</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">index</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span>
</span><span class='line'>                    <span class="s">&quot;index of slot can not be less than zero.&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">index</span> <span class="o">&gt;=</span> <span class="k">this</span><span class="o">.</span><span class="na">expiredTask</span><span class="o">.</span><span class="na">size</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span>
</span><span class='line'>                    <span class="s">&quot;index of slot can not be more than the count which exiting in slot.&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="k">return</span> <span class="nf">hasTask</span><span class="o">()</span> <span class="o">?</span> <span class="k">this</span><span class="o">.</span><span class="na">expiredTask</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">index</span><span class="o">)</span> <span class="o">:</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">void</span> <span class="nf">removeTask</span><span class="o">(</span><span class="n">AbstractTask</span> <span class="n">task</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">this</span><span class="o">.</span><span class="na">expiredTask</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">task</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Slot是TimeWheel中的一个私有内部类。最后形成的表盘结构如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="n">dialInSeconds</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Slot</span><span class="o">&lt;</span><span class="n">AbstractTask</span><span class="o">&gt;&gt;(</span><span class="mi">60</span><span class="o">);</span>
</span><span class='line'>    <span class="n">dialInMinutes</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Slot</span><span class="o">&lt;</span><span class="n">AbstractTask</span><span class="o">&gt;&gt;(</span><span class="mi">60</span><span class="o">);</span>
</span><span class='line'>    <span class="n">dialInHours</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Slot</span><span class="o">&lt;</span><span class="n">AbstractTask</span><span class="o">&gt;&gt;(</span><span class="mi">24</span><span class="o">);</span>
</span><span class='line'>    <span class="n">dialInDays</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Slot</span><span class="o">&lt;</span><span class="n">AbstractTask</span><span class="o">&gt;&gt;(</span><span class="mi">30</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<h4>定时驱动线程池</h4>

<p>为了让四个表盘能够互不干涉的按指定的tick运行，我们设置了表盘驱动。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="n">ScheduledExecutorService</span>      <span class="n">timeSecondDriver</span><span class="o">;</span>                                                        <span class="c1">// 秒针驱动</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="n">ScheduledExecutorService</span>      <span class="n">timeMinuteDriver</span><span class="o">;</span>                                                        <span class="c1">// 分钟驱动</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="n">ScheduledExecutorService</span>      <span class="n">timeHourDriver</span><span class="o">;</span>                                                          <span class="c1">// 小时驱动</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="n">ScheduledExecutorService</span>      <span class="n">timeDayDriver</span><span class="o">;</span>                                                           <span class="c1">// 天级驱动</span>
</span></code></pre></td></tr></table></div></figure>


<p>初始化时设定不同的定时间隔时间。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">timeSecondDriver</span><span class="o">.</span><span class="na">scheduleAtFixedRate</span><span class="o">(</span><span class="n">secondDriver</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">1000</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">MILLISECONDS</span><span class="o">);</span>
</span><span class='line'><span class="n">timeMinuteDriver</span><span class="o">.</span><span class="na">scheduleAtFixedRate</span><span class="o">(</span><span class="n">minuteDriver</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">60</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">);</span>
</span><span class='line'><span class="n">timeHourDriver</span><span class="o">.</span><span class="na">scheduleAtFixedRate</span><span class="o">(</span><span class="n">hourDriver</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">60</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">MINUTES</span><span class="o">);</span>
</span><span class='line'><span class="n">timeDayDriver</span><span class="o">.</span><span class="na">scheduleAtFixedRate</span><span class="o">(</span><span class="n">dayDriver</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">24</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">HOURS</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<h4>表盘任务线程</h4>

<p>由于每次表盘转动定时器要做的工作比较类似，所以抽象为一个统一的线程任务TimeDriverThread。
表盘转动任务主要做两件事情：</p>

<ul>
<li>秒级表盘上对到期的任务进行执行</li>
<li>其他表盘上的到期任务进行降级处理</li>
</ul>


<p>初始化挂载的时候就将任务挂载到最粗时间精度表盘；当粗粒度表盘到期后，将该Slot上的任务重新挂载到次粗粒度表盘。
比如一个任务taska是1小时15分30秒执行一次。初始化的时候将它挂载到dialInHours[1],当小时数到期后，对其根据分钟数降级，挂载到<code>分钟表盘当前时间后15个slot</code>的位置；15分钟后，再将该任务挂载到dialInSeconds表盘<code>距离当前指针位置30个slot</code>的地方。
这里我们采用求模运算，挂载的时间复杂度为O(1).秒级盘到期后，由任务处理器执行日志打印任务。</p>

<h4>任务执行处理器</h4>

<p>ExpiredWorkProcessor是执行具体任务的处理器。他在秒级盘到期之后，执行具体任务的run方法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">final</span> <span class="kd">private</span> <span class="kd">class</span> <span class="nc">ExpiredWorkProcessor</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// work threads</span>
</span><span class='line'>        <span class="kd">private</span> <span class="n">ThreadPoolExecutor</span> <span class="n">workThreads</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">ExpiredWorkProcessor</span><span class="o">(</span><span class="n">Integer</span> <span class="n">threadCount</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">workThreads</span> <span class="o">=</span> <span class="o">(</span><span class="n">ThreadPoolExecutor</span><span class="o">)</span> <span class="n">Executors</span><span class="o">.</span><span class="na">newFixedThreadPool</span><span class="o">(</span><span class="n">threadCount</span><span class="o">,</span>
</span><span class='line'>                <span class="k">new</span> <span class="nf">ThreadFactory</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>                    <span class="kd">final</span> <span class="n">AtomicLong</span> <span class="n">count</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">AtomicLong</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>                    <span class="nd">@Override</span>
</span><span class='line'>                    <span class="kd">public</span> <span class="n">Thread</span> <span class="nf">newThread</span><span class="o">(</span><span class="n">Runnable</span> <span class="n">r</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                        <span class="k">return</span> <span class="k">new</span> <span class="nf">Thread</span><span class="o">(</span><span class="k">new</span> <span class="nf">ThreadGroup</span><span class="o">(</span><span class="s">&quot;TimeWheelTest&quot;</span><span class="o">),</span> <span class="n">r</span><span class="o">,</span> <span class="s">&quot;ExpiredWorkProcessor-&quot;</span>
</span><span class='line'>                                                                          <span class="o">+</span> <span class="n">count</span><span class="o">.</span><span class="na">getAndIncrement</span><span class="o">());</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                <span class="o">});</span>
</span><span class='line'>        <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这是一个线程池，默认10个线程来执行具体任务。可以通过初始化的时候设定workThreads来修改线程池大小。</p>

<h3>运行过程</h3>

<h4>初始化过程</h4>

<p>时间轮的初始化过程可以用下图标识：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">st</span><span class="o">=&gt;</span><span class="nl">start:</span> <span class="n">Start</span>
</span><span class='line'><span class="n">e</span><span class="o">=&gt;</span><span class="n">end</span>
</span><span class='line'><span class="n">initialDial</span><span class="o">=&gt;</span><span class="nl">operation:</span> <span class="n">初始化表盘和驱动线程等</span>
</span><span class='line'><span class="n">initialProcess</span><span class="o">=&gt;</span><span class="nl">operation:</span> <span class="n">初始化任务处理器</span>
</span><span class='line'><span class="n">registerTask</span><span class="o">=&gt;</span><span class="nl">operation:</span> <span class="n">注册任务</span>
</span><span class='line'><span class="n">io</span><span class="o">=&gt;</span><span class="nl">inputoutput:</span> <span class="k">throw</span> <span class="n">Error</span><span class="o">...|</span><span class="n">request</span>
</span><span class='line'><span class="n">cond</span><span class="o">=&gt;</span><span class="nl">condition:</span> <span class="n">初始化成功</span> <span class="n">or</span> <span class="n">初始化失败</span><span class="o">?</span>
</span><span class='line'>
</span><span class='line'><span class="n">st</span><span class="o">-&gt;</span><span class="n">initialDial</span><span class="o">-&gt;</span><span class="n">initialProcess</span><span class="o">-&gt;</span><span class="n">cond</span>
</span><span class='line'><span class="nf">cond</span><span class="o">(</span><span class="n">yes</span><span class="o">)-&gt;</span><span class="n">registerTask</span><span class="o">-&gt;</span><span class="n">e</span>
</span><span class='line'><span class="nf">cond</span><span class="o">(</span><span class="n">no</span><span class="o">)-&gt;</span><span class="n">io</span><span class="o">-&gt;</span><span class="n">e</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://zos.alipayobjects.com/rmsportal/bDCelvYHvhmhsTFQyBEr.jpg" alt="imgs" /></p>

<p>如上图所示，时间路你启动过程大概经过如下过程：</p>

<ol>
<li>检查时间轮是否启动，如果没有启动，进行表盘和处理器的初始化；</li>
<li>初始化成功，挂载任务。 挂载任务到对应的最粗粒度表盘。比如taska的dayPeriod>0,那么就将它挂载到天级表盘，如果dayPeriod=0，hourPeriod>0,则挂载到小时级表盘，以此类推。</li>
</ol>


<h4>定时执行过程</h4>

<ol>
<li>定时驱动器按照各自表盘的时间间隔修改表盘的指针</li>
<li><p>转到特定slot时，如果slot上有任务，则进行以下两种处理：</p></li>
<li><ul>
<li><p>如果是非秒级盘到期，则将slot上的任务按照低一级的时间精度挂在到次粗粒度表盘，比如小时表盘的任务下放到分钟表盘</p></li>
<li><p>如果是秒级则直接执行任务run方法</p></li>
</ul>
</li>
</ol>


<h4>重新挂载过程</h4>

<p>定时任务都都是周期性的，所以在执行任务之后还需要重新挂载。在每个任务执行完成之后，会重新挂载任务到初始状态。</p>

<h3>总结</h3>

<p>本文讲述了全局定时器的时间轮算法实现方式，如有不妥欢迎大家指出。</p>
]]></content>
  </entry>
  
</feed>
